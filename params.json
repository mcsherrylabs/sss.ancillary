{
  "name": "sss.ancillary",
  "tagline": "Utilities orthogonal to any project, depended on by most.",
  "body": "# sss.ancillary\r\nOrthogonal to and depended on by many projects\r\n\r\n[![Build Status](https://travis-ci.org/mcsherrylabs/sss.ancillary.svg?branch=master)](https://travis-ci.org/mcsherrylabs/sss.ancillary)\r\n[![Coverage Status](https://coveralls.io/repos/mcsherrylabs/sss.ancillary/badge.svg?branch=master&service=github)](https://coveralls.io/github/mcsherrylabs/sss.ancillary?branch=master)\r\n\r\n```\r\nresolvers += \"stepsoft\" at \"http://nexus.mcsherrylabs.com/nexus/content/groups/public\"\r\n\r\nlibraryDependencies += \"mcsherrylabs.com\" %% \"sss-ancillary\" % \"0.9.13\"\r\n```\r\n\r\nContains a few useful traits including Logging and typesafe config helpers as well as a few Reflection utilities. \r\n\r\nFor example given the name of a Typesafe config it can map the values in that config to a pure trait.\r\n\r\n```\r\n  trait MimicInterface {\r\n    val name: String\r\n    val ingredients: java.lang.Iterable[String]\r\n  }\r\n\r\n  dish {\r\n  \tname = \"SomeCompany\"\r\n  \tingredients = [\"potato\", \"bacon\", \"onion\", \"salt\", \"pepper\"]\r\n  }\r\n\r\n  val sut = DynConfig[MimicInterface](\"dish\")\r\n  assert(sut.name == \"SomeCompany\")\r\n  assert(sut.ingredients.toSet == Set(\"potato\", \"bacon\", \"onion\", \"salt\", \"pepper\"))\r\n```  \r\n\r\nNow contains a ServerLauncher - useful for starting an embedded Jetty server.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}